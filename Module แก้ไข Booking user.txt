<?php
// ============================================
// 1. MODEL LAYER - models/Booking.php (เพิ่มเติม)
// ============================================

class Booking extends Model {
    
    /**
     * ตรวจสอบว่าผู้ใช้สามารถแก้ไขการจองนี้ได้หรือไม่
     * @param int $bookingId
     * @param int $userId
     * @return array ['allowed' => bool, 'reason' => string]
     */
    public function canModify($bookingId, $userId) {
        try {
            // ดึงข้อมูลการจอง
            $query = "SELECT b.*, p.status as payment_status, p.id as payment_id
                     FROM bookings b
                     LEFT JOIN payments p ON b.id = p.booking_id
                     WHERE b.id = :booking_id AND b.user_id = :user_id";
            
            $stmt = $this->db->prepare($query);
            $stmt->execute([
                ':booking_id' => $bookingId,
                ':user_id' => $userId
            ]);
            
            $booking = $stmt->fetch(PDO::FETCH_ASSOC);
            
            // ตรวจสอบว่ามีการจองหรือไม่
            if (!$booking) {
                return [
                    'allowed' => false,
                    'reason' => 'ไม่พบข้อมูลการจองหรือคุณไม่มีสิทธิ์แก้ไข'
                ];
            }
            
            // ตรวจสอบสถานะการจอง
            if ($booking['status'] !== 'pending') {
                return [
                    'allowed' => false,
                    'reason' => 'ไม่สามารถแก้ไขการจองที่มีสถานะ ' . $booking['status']
                ];
            }
            
            // ตรวจสอบสถานะการชำระเงิน
            if ($booking['payment_status'] === 'verified') {
                return [
                    'allowed' => false,
                    'reason' => 'ไม่สามารถแก้ไขการจองที่มีการยืนยันการชำระเงินแล้ว'
                ];
            }
            
            // ตรวจสอบเวลา (optional: เพิ่มเงื่อนไขเวลาถ้าต้องการ)
            $checkInDate = new DateTime($booking['check_in_date']);
            $now = new DateTime();
            $interval = $now->diff($checkInDate);
            
            // ถ้าเหลือเวลาน้อยกว่า 24 ชั่วโมง
            if ($interval->days < 1 && !$interval->invert) {
                return [
                    'allowed' => false,
                    'reason' => 'ไม่สามารถแก้ไขการจองที่เหลือเวลาน้อยกว่า 24 ชั่วโมง'
                ];
            }
            
            return [
                'allowed' => true,
                'reason' => 'สามารถแก้ไขได้'
            ];
            
        } catch (Exception $e) {
            $this->logError('canModify error: ' . $e->getMessage());
            return [
                'allowed' => false,
                'reason' => 'เกิดข้อผิดพลาดในการตรวจสอบสิทธิ์'
            ];
        }
    }
    
    /**
     * อัพเดตรายละเอียดการจอง
     * @param int $bookingId
     * @param array $data
     * @return array ['success' => bool, 'message' => string]
     */
    public function updateDetails($bookingId, $data) {
        $this->db->beginTransaction();
        
        try {
            // ตรวจสอบสิทธิ์การแก้ไขอีกครั้ง
            $canModify = $this->canModify($bookingId, $data['user_id']);
            if (!$canModify['allowed']) {
                throw new Exception($canModify['reason']);
            }
            
            // ดึงข้อมูลการจองเดิม
            $oldBooking = $this->getById($bookingId);
            
            // Validate ข้อมูลใหม่
            $validation = $this->validate($data);
            if (!$validation['valid']) {
                throw new Exception('ข้อมูลไม่ถูกต้อง: ' . implode(', ', $validation['errors']));
            }
            
            // ตรวจสอบ availability ของแพ็คเกจ
            if (isset($data['check_in_date']) || isset($data['check_out_date'])) {
                $availability = $this->checkPackageAvailability(
                    $data['package_id'] ?? $oldBooking['package_id'],
                    $data['check_in_date'] ?? $oldBooking['check_in_date'],
                    $data['check_out_date'] ?? $oldBooking['check_out_date'],
                    $data['num_guests'] ?? $oldBooking['num_guests']
                );
                
                if (!$availability['available']) {
                    throw new Exception('แพ็คเกจไม่ว่างในช่วงเวลาที่เลือก');
                }
            }
            
            // ลบ availability ledger เดิม
            $this->deleteAvailabilityLedger($bookingId);
            
            // อัพเดตข้อมูลการจอง
            $updateQuery = "UPDATE bookings SET 
                           check_in_date = :check_in_date,
                           check_out_date = :check_out_date,
                           num_guests = :num_guests,
                           special_requests = :special_requests,
                           updated_at = NOW()
                           WHERE id = :booking_id";
            
            $stmt = $this->db->prepare($updateQuery);
            $stmt->execute([
                ':check_in_date' => $data['check_in_date'] ?? $oldBooking['check_in_date'],
                ':check_out_date' => $data['check_out_date'] ?? $oldBooking['check_out_date'],
                ':num_guests' => $data['num_guests'] ?? $oldBooking['num_guests'],
                ':special_requests' => $data['special_requests'] ?? $oldBooking['special_requests'],
                ':booking_id' => $bookingId
            ]);
            
            // สร้าง availability ledger ใหม่
            $this->seedAvailabilityLedger($bookingId);
            
            // Invalidate cache
            $this->availability_cache_invalidate($oldBooking['package_id']);
            
            // บันทึก log
            $this->log_event('booking_updated', [
                'booking_id' => $bookingId,
                'user_id' => $data['user_id'],
                'changes' => array_diff_assoc($data, $oldBooking)
            ]);
            
            $this->db->commit();
            
            return [
                'success' => true,
                'message' => 'อัพเดตการจองสำเร็จ'
            ];
            
        } catch (Exception $e) {
            $this->db->rollBack();
            $this->logError('updateDetails error: ' . $e->getMessage());
            
            return [
                'success' => false,
                'message' => $e->getMessage()
            ];
        }
    }
    
    /**
     * ยกเลิกการจองโดยลูกค้า
     * @param int $bookingId
     * @param int $userId
     * @param string $reason
     * @return array
     */
    public function cancelByCustomer($bookingId, $userId, $reason = '') {
        $this->db->beginTransaction();
        
        try {
            // ตรวจสอบสิทธิ์
            $canModify = $this->canModify($bookingId, $userId);
            if (!$canModify['allowed']) {
                throw new Exception($canModify['reason']);
            }
            
            // คำนวณค่าปรับ (ถ้ามี)
            $cancellationFee = $this->calculateCancellationFee($bookingId);
            
            // อัพเดตสถานะเป็น cancelled
            $query = "UPDATE bookings SET 
                     status = 'cancelled',
                     cancellation_reason = :reason,
                     cancellation_fee = :fee,
                     cancelled_at = NOW(),
                     cancelled_by = :user_id
                     WHERE id = :booking_id";
            
            $stmt = $this->db->prepare($query);
            $stmt->execute([
                ':reason' => $reason,
                ':fee' => $cancellationFee,
                ':user_id' => $userId,
                ':booking_id' => $bookingId
            ]);
            
            // ลบ availability ledger
            $this->deleteAvailabilityLedger($bookingId);
            
            // Invalidate cache
            $booking = $this->getById($bookingId);
            $this->availability_cache_invalidate($booking['package_id']);
            
            // บันทึก log
            $this->log_event('booking_cancelled_by_customer', [
                'booking_id' => $bookingId,
                'user_id' => $userId,
                'reason' => $reason,
                'cancellation_fee' => $cancellationFee
            ]);
            
            // ส่งอีเมลแจ้งเตือน (optional)
            $this->sendCancellationEmail($bookingId, $userId);
            
            $this->db->commit();
            
            return [
                'success' => true,
                'message' => 'ยกเลิกการจองสำเร็จ',
                'cancellation_fee' => $cancellationFee
            ];
            
        } catch (Exception $e) {
            $this->db->rollBack();
            $this->logError('cancelByCustomer error: ' . $e->getMessage());
            
            return [
                'success' => false,
                'message' => $e->getMessage()
            ];
        }
    }
    
    /**
     * คำนวณค่าปรับการยกเลิก
     * @param int $bookingId
     * @return float
     */
    private function calculateCancellationFee($bookingId) {
        $booking = $this->getById($bookingId);
        $checkInDate = new DateTime($booking['check_in_date']);
        $now = new DateTime();
        $interval = $now->diff($checkInDate);
        $daysBeforeCheckIn = $interval->days;
        
        $totalAmount = $booking['total_amount'];
        $fee = 0;
        
        // นโยบายค่าปรับ
        if ($daysBeforeCheckIn <= 1) {
            $fee = $totalAmount * 0.50; // 50% ถ้ายกเลิกภายใน 1 วัน
        } elseif ($daysBeforeCheckIn <= 3) {
            $fee = $totalAmount * 0.30; // 30% ถ้ายกเลิกภายใน 3 วัน
        } elseif ($daysBeforeCheckIn <= 7) {
            $fee = $totalAmount * 0.15; // 15% ถ้ายกเลิกภายใน 7 วัน
        }
        // มากกว่า 7 วัน ไม่มีค่าปรับ
        
        return $fee;
    }
}

// ============================================
// 2. API LAYER - pages/api/bookings_update.php
// ============================================

<?php
session_start();
require_once '../../includes/config.php';
require_once '../../includes/functions.php';
require_once '../../models/Booking.php';
require_once '../../models/User.php';

// Set JSON header
header('Content-Type: application/json');

// ตรวจสอบว่าเป็น method ที่ถูกต้อง
$method = $_SERVER['REQUEST_METHOD'];
if (!in_array($method, ['PATCH', 'DELETE'])) {
    http_response_code(405);
    echo json_encode(['error' => 'Method not allowed']);
    exit;
}

// ตรวจสอบการ login
if (!isset($_SESSION['user_id'])) {
    http_response_code(401);
    echo json_encode(['error' => 'Unauthorized']);
    exit;
}

// ตรวจสอบ CSRF token
if (!isset($_POST['csrf_token']) || !verify_csrf_token($_POST['csrf_token'])) {
    http_response_code(403);
    echo json_encode(['error' => 'Invalid CSRF token']);
    exit;
}

$booking = new Booking($db);
$userId = $_SESSION['user_id'];

// รับ booking ID จาก request
$bookingId = isset($_POST['booking_id']) ? intval($_POST['booking_id']) : 0;
$bookingCode = isset($_POST['booking_code']) ? $_POST['booking_code'] : '';

// ถ้าไม่มี booking_id ให้ลองหาจาก booking_code
if (!$bookingId && $bookingCode) {
    $bookingData = $booking->getByCode($bookingCode);
    if ($bookingData) {
        $bookingId = $bookingData['id'];
    }
}

if (!$bookingId) {
    http_response_code(400);
    echo json_encode(['error' => 'Invalid booking ID or code']);
    exit;
}

// ตรวจสอบสิทธิ์การแก้ไข
$canModify = $booking->canModify($bookingId, $userId);
if (!$canModify['allowed']) {
    http_response_code(403);
    echo json_encode(['error' => $canModify['reason']]);
    exit;
}

// ดำเนินการตาม method
switch ($method) {
    case 'PATCH':
        // แก้ไขการจอง
        $data = [
            'user_id' => $userId,
            'check_in_date' => $_POST['check_in_date'] ?? null,
            'check_out_date' => $_POST['check_out_date'] ?? null,
            'num_guests' => $_POST['num_guests'] ?? null,
            'special_requests' => $_POST['special_requests'] ?? null
        ];
        
        // กรองเฉพาะข้อมูลที่มีค่า
        $data = array_filter($data, function($value) {
            return $value !== null;
        });
        
        $result = $booking->updateDetails($bookingId, $data);
        
        if ($result['success']) {
            http_response_code(200);
            echo json_encode([
                'success' => true,
                'message' => $result['message']
            ]);
        } else {
            http_response_code(400);
            echo json_encode([
                'error' => $result['message']
            ]);
        }
        break;
        
    case 'DELETE':
        // ยกเลิกการจอง
        $reason = $_POST['cancellation_reason'] ?? 'ลูกค้าขอยกเลิก';
        
        $result = $booking->cancelByCustomer($bookingId, $userId, $reason);
        
        if ($result['success']) {
            http_response_code(200);
            echo json_encode([
                'success' => true,
                'message' => $result['message'],
                'cancellation_fee' => $result['cancellation_fee']
            ]);
        } else {
            http_response_code(400);
            echo json_encode([
                'error' => $result['message']
            ]);
        }
        break;
}

// ============================================
// 3. UI LAYER - pages/profile.php (เพิ่มเติม)
// ============================================

// เพิ่มใน section แสดงรายการจอง
?>

<div class="bookings-section">
    <h2>รายการจองของคุณ</h2>
    
    <?php foreach ($userBookings as $booking): ?>
        <?php 
        // ตรวจสอบว่าสามารถแก้ไขได้หรือไม่
        $canModify = $bookingModel->canModify($booking['id'], $_SESSION['user_id']);
        ?>
        
        <div class="booking-card" data-booking-id="<?= $booking['id'] ?>">
            <div class="booking-header">
                <h3>รหัสการจอง: <?= htmlspecialchars($booking['booking_code']) ?></h3>
                <span class="status <?= $booking['status'] ?>"><?= $booking['status'] ?></span>
            </div>
            
            <div class="booking-details">
                <p><strong>แพ็คเกจ:</strong> <?= htmlspecialchars($booking['package_name']) ?></p>
                <p><strong>เช็คอิน:</strong> <?= date('d/m/Y', strtotime($booking['check_in_date'])) ?></p>
                <p><strong>เช็คเอาท์:</strong> <?= date('d/m/Y', strtotime($booking['check_out_date'])) ?></p>
                <p><strong>จำนวนผู้เข้าพัก:</strong> <?= $booking['num_guests'] ?> คน</p>
                <p><strong>ยอดรวม:</strong> ฿<?= number_format($booking['total_amount'], 2) ?></p>
                
                <?php if ($booking['payment_status']): ?>
                    <p><strong>สถานะการชำระเงิน:</strong> 
                        <span class="payment-status <?= $booking['payment_status'] ?>">
                            <?= $booking['payment_status'] ?>
                        </span>
                    </p>
                <?php endif; ?>
            </div>
            
            <?php if ($canModify['allowed']): ?>
                <div class="booking-actions">
                    <button class="btn btn-warning edit-booking-btn" 
                            data-booking-id="<?= $booking['id'] ?>"
                            data-booking-code="<?= $booking['booking_code'] ?>">
                        <i class="fas fa-edit"></i> แก้ไข
                    </button>
                    
                    <button class="btn btn-danger cancel-booking-btn" 
                            data-booking-id="<?= $booking['id'] ?>"
                            data-booking-code="<?= $booking['booking_code'] ?>">
                        <i class="fas fa-times"></i> ยกเลิก
                    </button>
                </div>
            <?php else: ?>
                <div class="booking-notice">
                    <p class="text-muted">
                        <i class="fas fa-info-circle"></i> 
                        <?= htmlspecialchars($canModify['reason']) ?>
                    </p>
                </div>
            <?php endif; ?>
        </div>
    <?php endforeach; ?>
</div>

<!-- Modal แก้ไขการจอง -->
<div class="modal fade" id="editBookingModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">แก้ไขการจอง</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            
            <form id="editBookingForm">
                <div class="modal-body">
                    <input type="hidden" id="edit-booking-id" name="booking_id">
                    <input type="hidden" name="csrf_token" value="<?= generate_csrf_token() ?>">
                    
                    <div class="form-group">
                        <label for="edit-check-in">วันเช็คอิน</label>
                        <input type="date" class="form-control" id="edit-check-in" 
                               name="check_in_date" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-check-out">วันเช็คเอาท์</label>
                        <input type="date" class="form-control" id="edit-check-out" 
                               name="check_out_date" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-guests">จำนวนผู้เข้าพัก</label>
                        <input type="number" class="form-control" id="edit-guests" 
                               name="num_guests" min="1" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-requests">คำขอพิเศษ</label>
                        <textarea class="form-control" id="edit-requests" 
                                  name="special_requests" rows="3"></textarea>
                    </div>
                    
                    <div id="availability-check-result"></div>
                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">ยกเลิก</button>
                    <button type="submit" class="btn btn-primary">บันทึกการแก้ไข</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal ยืนยันการยกเลิก -->
<div class="modal fade" id="cancelBookingModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">ยืนยันการยกเลิกการจอง</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            
            <form id="cancelBookingForm">
                <div class="modal-body">
                    <input type="hidden" id="cancel-booking-id" name="booking_id">
                    <input type="hidden" name="csrf_token" value="<?= generate_csrf_token() ?>">
                    
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>คำเตือน:</strong> การยกเลิกการจองอาจมีค่าปรับตามนโยบายการยกเลิก
                    </div>
                    
                    <div class="cancellation-policy">
                        <h6>นโยบายการยกเลิก:</h6>
                        <ul>
                            <li>ยกเลิกล่วงหน้ามากกว่า 7 วัน: ไม่มีค่าปรับ</li>
                            <li>ยกเลิกล่วงหน้า 3-7 วัน: ค่าปรับ 15%</li>
                            <li>ยกเลิกล่วงหน้า 1-3 วัน: ค่าปรับ 30%</li>
                            <li>ยกเลิกน้อยกว่า 1 วัน: ค่าปรับ 50%</li>
                        </ul>
                    </div>
                    
                    <div class="form-group">
                        <label for="cancellation-reason">เหตุผลในการยกเลิก</label>
                        <textarea class="form-control" id="cancellation-reason" 
                                  name="cancellation_reason" rows="3" required></textarea>
                    </div>
                    
                    <div id="cancellation-fee-estimate"></div>
                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">ไม่ยกเลิก</button>
                    <button type="submit" class="btn btn-danger">ยืนยันการยกเลิก</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// JavaScript สำหรับจัดการ Modal และ AJAX
$(document).ready(function() {
    
    // เปิด Modal แก้ไขการจอง
    $('.edit-booking-btn').click(function() {
        const bookingId = $(this).data('booking-id');
        const bookingCard = $(this).closest('.booking-card');
        
        // ดึงข้อมูลจาก DOM
        $('#edit-booking-id').val(bookingId);
        
        // โหลดข้อมูลการจองปัจจุบัน (สามารถเรียก API เพิ่มเติมได้)
        $.get('/api/bookings/' + bookingId, function(data) {
            $('#edit-check-in').val(data.check_in_date);
            $('#edit-check-out').val(data.check_out_date);
            $('#edit-guests').val(data.num_guests);
            $('#edit-requests').val(data.special_requests);
        });
        
        $('#editBookingModal').modal('show');
    });
    
    // ส่งฟอร์มแก้ไขการจอง
    $('#editBookingForm').submit(function(e) {
        e.preventDefault();
        
        const formData = $(this).serialize();
        
        $.ajax({
            url: '/api/bookings_update.php',
            type: 'PATCH',
            data: formData,
            success: function(response) {
                Swal.fire({
                    icon: 'success',
                    title: 'สำเร็จ!',
                    text: response.message,
                    confirmButtonText: 'ตกลง'
                }).then(() => {
                    location.reload();
                });
            },
            error: function(xhr) {
                const error = JSON.parse(xhr.responseText);
                Swal.fire({
                    icon: 'error',
                    title: 'เกิดข้อผิดพลาด',
                    text: error.error || 'ไม่สามารถแก้ไขการจองได้'
                });
            }
        });
    });
    
    // เปิด Modal ยกเลิกการจอง
    $('.cancel-booking-btn').click(function() {
        const bookingId = $(this).data('booking-id');
        $('#cancel-booking-id').val(bookingId);
        
        // คำนวณค่าปรับโดยประมาณ
        calculateCancellationFee(bookingId);
        
        $('#cancelBookingModal').modal('show');
    });
    
    // ส่งฟอร์มยกเลิกการจอง
    $('#cancelBookingForm').submit(function(e) {
        e.preventDefault();
        
        const formData = $(this).serialize();
        
        Swal.fire({
            title: 'ยืนยันการยกเลิก?',
            text: "คุณแน่ใจหรือไม่ที่จะยกเลิกการจองนี้?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'ใช่, ยกเลิกการจอง',
            cancelButtonText: 'ไม่ยกเลิก'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/api/bookings_update.php',
                    type: 'DELETE',
                    data: formData,
                    success: function(response) {
                        Swal.fire({
                            icon: 'success',
                            title: 'ยกเลิกสำเร็จ',
                            text: response.message + 
                                  (response.cancellation_fee > 0 ? 
                                   '\nค่าปรับ: ฿' + response.cancellation_fee.toFixed(2) : ''),
                            confirmButtonText: 'ตกลง'
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function(xhr) {
                        const error = JSON.parse(xhr.responseText);
                        Swal.fire({
                            icon: 'error',
                            title: 'เกิดข้อผิดพลาด',
                            text: error.error || 'ไม่สามารถยกเลิกการจองได้'
                        });
                    }
                });
            }
        });
    });
    
    // ตรวจสอบ availability เมื่อเปลี่ยนวันที่
    $('#edit-check-in, #edit-check-out').change(function() {
        const checkIn = $('#edit-check-in').val();
        const checkOut = $('#edit-check-out').val();
        
        if (checkIn && checkOut) {
            // เรียก API ตรวจสอบ availability
            checkAvailability(checkIn, checkOut);
        }
    });
    
    function calculateCancellationFee(bookingId) {
        // เรียก API คำนวณค่าปรับ
        $.get('/api/calculate_cancellation_fee.php', {
            booking_id: bookingId
        }, function(data) {
            if (data.fee > 0) {
                $('#cancellation-fee-estimate').html(
                    '<div class="alert alert-info">' +
                    'ค่าปรับโดยประมาณ: <strong>฿' + data.fee.toFixed(2) + '</strong>' +
                    '</div>'
                );
            }
        });
    }
    
    function checkAvailability(checkIn, checkOut) {
        // Implementation for checking availability
        $('#availability-check-result').html(
            '<div class="text-info"><i class="fas fa-spinner fa-spin"></i> กำลังตรวจสอบ...</div>'
        );
        
        // AJAX call to check availability
        setTimeout(() => {
            $('#availability-check-result').html(
                '<div class="text-success"><i class="fas fa-check"></i> แพ็คเกจว่าง</div>'
            );
        }, 1000);
    }
});
</script>

<style>
/* CSS สำหรับ UI */
.booking-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    background: #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.booking-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
}

.status {
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
    text-transform: uppercase;
}

.status.pending {
    background: #ffc107;
    color: #fff;
}

.status.confirmed {
    background: #28a745;
    color: #fff;
}

.status.cancelled {
    background: #dc3545;
    color: #fff;
}

.payment-status {
    padding: 3px 8px;
    border-radius: 3px;
    font-size: 11px;
}

.payment-status.verified {
    background: #28a745;
    color: #fff;
}

.payment-status.pending {
    background: #ffc107;
    color: #333;
}

.booking-actions {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid #eee;
}

.booking-actions .btn {
    margin-right: 10px;
}

.cancellation-policy {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 5px;
    margin: 15px 0;
}

.cancellation-policy ul {
    margin-bottom: 0;
}

.booking-notice {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid #eee;
}
</style>

<?php
// ============================================
// 4. UNIT TESTS - tests/Unit/BookingTest.php
// ============================================

use PHPUnit\Framework\TestCase;

class BookingTest extends TestCase {
    private $booking;
    private $db;
    
    protected function setUp(): void {
        // Setup test database connection
        $this->db = new PDO('mysql:host=localhost;dbname=test_glamping', 'root', '');
        $this->booking = new Booking($this->db);
    }
    
    /**
     * Test canModify method with pending status and no payment
     */
    public function testCanModifyWithPendingStatusAndNoPayment() {
        // Create test booking
        $bookingId = $this->createTestBooking('pending', null);
        $userId = 1;
        
        $result = $this->booking->canModify($bookingId, $userId);
        
        $this->assertTrue($result['allowed']);
        $this->assertEquals('สามารถแก้ไขได้', $result['reason']);
    }
    
    /**
     * Test canModify method with verified payment
     */
    public function testCannotModifyWithVerifiedPayment() {
        // Create test booking with verified payment
        $bookingId = $this->createTestBooking('pending', 'verified');
        $userId = 1;
        
        $result = $this->booking->canModify($bookingId, $userId);
        
        $this->assertFalse($result['allowed']);
        $this->assertStringContainsString('ยืนยันการชำระเงิน', $result['reason']);
    }
    
    /**
     * Test canModify method with confirmed status
     */
    public function testCannotModifyWithConfirmedStatus() {
        // Create test booking with confirmed status
        $bookingId = $this->createTestBooking('confirmed', null);
        $userId = 1;
        
        $result = $this->booking->canModify($bookingId, $userId);
        
        $this->assertFalse($result['allowed']);
        $this->assertStringContainsString('confirmed', $result['reason']);
    }
    
    /**
     * Test updateDetails method
     */
    public function testUpdateDetails() {
        $bookingId = $this->createTestBooking('pending', null);
        
        $newData = [
            'user_id' => 1,
            'check_in_date' => '2025-01-15',
            'check_out_date' => '2025-01-17',
            'num_guests' => 3,
            'special_requests' => 'Late check-in requested'
        ];
        
        $result = $this->booking->updateDetails($bookingId, $newData);
        
        $this->assertTrue($result['success']);
        
        // Verify the update
        $updatedBooking = $this->booking->getById($bookingId);
        $this->assertEquals('2025-01-15', $updatedBooking['check_in_date']);
        $this->assertEquals(3, $updatedBooking['num_guests']);
    }
    
    /**
     * Test cancelByCustomer method
     */
    public function testCancelByCustomer() {
        $bookingId = $this->createTestBooking('pending', null);
        $userId = 1;
        $reason = 'Change of plans';
        
        $result = $this->booking->cancelByCustomer($bookingId, $userId, $reason);
        
        $this->assertTrue($result['success']);
        $this->assertArrayHasKey('cancellation_fee', $result);
        
        // Verify the cancellation
        $cancelledBooking = $this->booking->getById($bookingId);
        $this->assertEquals('cancelled', $cancelledBooking['status']);
        $this->assertEquals($reason, $cancelledBooking['cancellation_reason']);
    }
    
    /**
     * Test calculateCancellationFee method
     */
    public function testCalculateCancellationFee() {
        // Test different scenarios
        
        // 10 days before check-in - no fee
        $bookingId1 = $this->createTestBookingWithCheckIn('+10 days');
        $fee1 = $this->invokePrivateMethod($this->booking, 'calculateCancellationFee', [$bookingId1]);
        $this->assertEquals(0, $fee1);
        
        // 5 days before check-in - 15% fee
        $bookingId2 = $this->createTestBookingWithCheckIn('+5 days');
        $fee2 = $this->invokePrivateMethod($this->booking, 'calculateCancellationFee', [$bookingId2]);
        $this->assertEquals(150, $fee2); // 15% of 1000
        
        // 2 days before check-in - 30% fee
        $bookingId3 = $this->createTestBookingWithCheckIn('+2 days');
        $fee3 = $this->invokePrivateMethod($this->booking, 'calculateCancellationFee', [$bookingId3]);
        $this->assertEquals(300, $fee3); // 30% of 1000
        
        // Less than 1 day - 50% fee
        $bookingId4 = $this->createTestBookingWithCheckIn('+12 hours');
        $fee4 = $this->invokePrivateMethod($this->booking, 'calculateCancellationFee', [$bookingId4]);
        $this->assertEquals(500, $fee4); // 50% of 1000
    }
    
    /**
     * Helper method to create test booking
     */
    private function createTestBooking($status = 'pending', $paymentStatus = null) {
        // Implementation to create test booking
        $query = "INSERT INTO bookings (user_id, package_id, check_in_date, check_out_date, 
                 num_guests, total_amount, status, booking_code) 
                 VALUES (1, 1, '2025-01-10', '2025-01-12', 2, 1000, :status, 'TEST123')";
        
        $stmt = $this->db->prepare($query);
        $stmt->execute([':status' => $status]);
        $bookingId = $this->db->lastInsertId();
        
        if ($paymentStatus) {
            $paymentQuery = "INSERT INTO payments (booking_id, status) VALUES (:booking_id, :status)";
            $stmt = $this->db->prepare($paymentQuery);
            $stmt->execute([':booking_id' => $bookingId, ':status' => $paymentStatus]);
        }
        
        return $bookingId;
    }
    
    private function createTestBookingWithCheckIn($checkInTime) {
        $checkIn = date('Y-m-d', strtotime($checkInTime));
        $checkOut = date('Y-m-d', strtotime($checkInTime . ' +2 days'));
        
        $query = "INSERT INTO bookings (user_id, package_id, check_in_date, check_out_date, 
                 num_guests, total_amount, status, booking_code) 
                 VALUES (1, 1, :check_in, :check_out, 2, 1000, 'pending', 'TEST456')";
        
        $stmt = $this->db->prepare($query);
        $stmt->execute([':check_in' => $checkIn, ':check_out' => $checkOut]);
        
        return $this->db->lastInsertId();
    }
    
    private function invokePrivateMethod($object, $methodName, array $parameters = []) {
        $reflection = new ReflectionClass(get_class($object));
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);
        return $method->invokeArgs($object, $parameters);
    }
    
    protected function tearDown(): void {
        // Clean up test data
        $this->db->exec("DELETE FROM bookings WHERE booking_code LIKE 'TEST%'");
        $this->db = null;
        $this->booking = null;
    }
}

// ============================================
// 5. DATABASE MIGRATIONS
// ============================================

-- เพิ่ม columns ใหม่ในตาราง bookings (ถ้ายังไม่มี)
ALTER TABLE bookings 
ADD COLUMN IF NOT EXISTS cancellation_reason TEXT,
ADD COLUMN IF NOT EXISTS cancellation_fee DECIMAL(10,2) DEFAULT 0,
ADD COLUMN IF NOT EXISTS cancelled_at TIMESTAMP NULL,
ADD COLUMN IF NOT EXISTS cancelled_by INT,
ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
ADD INDEX idx_status_user (status, user_id),
ADD INDEX idx_booking_code (booking_code);

-- เพิ่ม log table สำหรับการติดตามการเปลี่ยนแปลง
CREATE TABLE IF NOT EXISTS booking_modifications (
    id INT PRIMARY KEY AUTO_INCREMENT,
    booking_id INT NOT NULL,
    user_id INT NOT NULL,
    action VARCHAR(50) NOT NULL,
    old_values JSON,
    new_values JSON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (booking_id) REFERENCES bookings(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    INDEX idx_booking_action (booking_id, action)
);
?>